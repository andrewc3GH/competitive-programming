'''
1 - 2 - 3 - 4
1 - 2 - 3 - 4
1 - 2 - 3 - 4
1 - 2 - 3 - 4

paths = {1:[2], 2:[1, 3], 3:[2, 4], 4:[3]}
open = [True, True, True, True]

paths = {1:[2], 2:[1, 3], 4:[3]}
open = [True, True, False, True]

1 - 2 X X X 4 - 5
    |
    6 - 7   c
    |       |
    8 - 9 - a - b

Search: start at 1 and check to make sure everything is connected

2   7-9
|   |
1-4-6-8
|     |
3     5

Breadth first search
Depth first search

For next time:
Open 1 & 3
Know the difference between breadth and depth first search


f = open('closing.in', 'r')
info = f.readline().strip().split()
numPaths = int(info[1])
numBarnClosures = int(info[0])
pathDict = {}
openLst = []
for i in range(numPaths):
    pathInfo = f.readline().strip().split()
    if int(pathInfo[0]) not in pathDict:
        pathDict[int(pathInfo[0])] = {int(pathInfo[1])}
    else:
        pathDict[int(pathInfo[0])].add(int(pathInfo[1]))
    if int(pathInfo[1]) not in pathDict:
        pathDict[int(pathInfo[1])] = {int(pathInfo[0])}
    else:
        pathDict[int(pathInfo[1])].add(int(pathInfo[0]))

closedLst = []
for i in range(numBarnClosures):
    openLst.append(True)
    closedLst.append(int(f.readline().strip()))
numOpen = len(openLst)
f.close()

print(pathDict)

out = open('closing.out', 'w+')
for i in range(numBarnClosures):
    barnClosed = closedLst[i]
    index = 0
    queue = [barnClosed]
    visited = set()
    while index < len(queue):
        currentPoint = queue[index]
        if currentPoint not in visited:
            for neighbor in (pathDict[currentPoint]):
                queue.append(neighbor)
            visited.add(currentPoint)
        index += 1
    if len(visited) == numOpen:
        out.write("YES" + '\n')
    else:
        out.write("NO" + '\n')
    openLst[barnClosed - 1] = False
    numOpen -= 1
    for barn in pathDict.pop(barnClosed):
        pathDict[barn].remove(barnClosed)
out.close()'''