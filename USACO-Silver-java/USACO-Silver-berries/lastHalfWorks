import java.io.*;
import java.util.*;
//binary search to find berry value for each basket
//loop through trees and add the berry value to each basket
//if there are more baskets than trees with the minimum berry value, add berries from the trees with the most berries

//keep track of number of full baskets
//then mod each item in array by optimal number
//keep track of how many more baskets we need
//sort array and add this many baskets of berries
class Main {
  public static void main(String[] args) throws IOException {
    Scanner s = new Scanner(new File("berries.in"));
    int N = s.nextInt();
    int K = s.nextInt();
    ArrayList<Integer> berryArray = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      berryArray.add(s.nextInt());
    }
    Collections.sort(berryArray);
    Collections.reverse(berryArray);
    int bessieBerries = 0;
    for (int k = 1; k < berryArray.get(0) + 1; k++) {
      int currentNum = k;
      int currentBerries = 0;
      ArrayList<Integer> copyArray = new ArrayList<>(berryArray);
      ArrayList<Integer> newArray = new ArrayList<>();
      boolean first = true;
      int oldIndex = 0;
      while (oldIndex < K) {
        int currentIndex = oldIndex;
        if (oldIndex >= N) {
          currentIndex = oldIndex % N;
          if (first == true) {
            Collections.sort(copyArray);
            Collections.reverse(copyArray);
            first = false;
          }
        }
        if (copyArray.get(currentIndex) > currentNum) {
          for (int j = 0; j < (copyArray.get(currentIndex)/currentNum); j++) {
            newArray.add(currentNum);
          }
          copyArray.set(currentIndex, copyArray.get(currentIndex) - ((copyArray.get(currentIndex)/currentNum) * currentNum));
        } else {
          newArray.add(copyArray.get(currentIndex));
          copyArray.set(currentIndex, 0);
        }
        oldIndex += 1;
      }
      Collections.sort(newArray);
      Collections.reverse(newArray);
      for (int i = 0; i < newArray.size(); i++) {
        if (i == K) {
          break;
        }
        if (i > K/2 - 1) {
          currentBerries += newArray.get(i);
        }
      }
      
      if (currentBerries > bessieBerries) {
        bessieBerries = currentBerries;
      }
    }

    PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("berries.out")));
    pw.println(bessieBerries);
    pw.close();
  }
  public static int findIndex(int min, int max) {
    return (int)((min + max)/2);
  }
}