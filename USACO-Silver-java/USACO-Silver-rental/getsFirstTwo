import java.io.*;
import java.util.*;

class Main {
  public static void main(String[] args) throws IOException {
    Scanner s = new Scanner(new File("rental.in"));
    int numCows = s.nextInt();
    int milkOrders = s.nextInt();
    int cowOrders = s.nextInt();
    int[] cowArray = new int[numCows];
    for (int i = 0; i < numCows; i++) {
      cowArray[i] = s.nextInt();
    }
    int[][] milkArray = new int[milkOrders][2];
    for (int i = 0; i < milkOrders; i++) {
      milkArray[i][0] = s.nextInt();
      milkArray[i][1] = s.nextInt();
    }
    int[] cowOrdersArray = new int[cowOrders];
    for (int i = 0; i < cowOrders; i++) {
      cowOrdersArray[i] = s.nextInt();
    }
    Arrays.sort(cowArray);
    Arrays.sort(milkArray, (int[] a, int[] b) -> {
      return b[1] - a[1];
    });
    Arrays.sort(cowOrdersArray);

    //System.out.println(Arrays.toString(cowArray));

    /*for (int[] item : milkArray) {
      System.out.println(Arrays.toString(item));
    }*/

    int maxProfit = 0;
    for (int numRentals = 0; numRentals < cowOrders; numRentals++) {
      int numGallons = 0;
      for (int i = 0; i < numCows; i++) {
        if (i >= numRentals) {
          numGallons += cowArray[i];
        }
      }
      int rentalProfit = 0;
      for (int i = 0; i < numRentals; i++) {
        rentalProfit += cowOrdersArray[cowOrders - 1 - i];
      }
      int milkProfit = 0;
      for (int i = 0; i < milkOrders; i++) {
        if (numGallons >= milkArray[i][0]) {
          numGallons -= milkArray[i][0];
          milkProfit += milkArray[i][0] * milkArray[i][1];
        } else {
          milkProfit += numGallons * milkArray[i][1];
          break;
        }
      }
      if (milkProfit + rentalProfit > maxProfit) {
        maxProfit = milkProfit + rentalProfit;
      }
    }

    PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("rental.out")));
    pw.println(maxProfit);
    pw.close();

    /*
    go from 0 to the number of cow rental orders, that is equal to the number of cow rental orders that will be fulfilled for this iteration. (every combination)
    greedy - send all the lowest cows to the most optimal rental order
    use the remaining cows to sell milk (just go through the sorted orders)

    hw is also 2017 december
    */ 
  }
}