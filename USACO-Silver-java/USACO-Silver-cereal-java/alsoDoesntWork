import java.io.*;
import java.util.*;

class Main {
  public static void main(String[] args) throws IOException {
    Scanner s = new Scanner(new File("cereal.in"));
    int N = s.nextInt();
    int numCereals = s.nextInt();

    ArrayList[] array = new ArrayList[numCereals];
    for (int i = 0; i < numCereals; i++) {
      array[i] = new ArrayList<>();
    }

    HashMap<Integer, int[]> map = new HashMap<>();
    for (int i = 0; i < N; i++) {
      int first = s.nextInt() - 1;
      int second = s.nextInt() - 1;
      array[first].add(i + 1);
      array[second].add(-1 * (i + 1));
      map.put(i + 1, new int[]{first, second});
    }
    /*
    System.out.println(Arrays.toString(array));
    for (int key : map.keySet()) {
      System.out.println(Arrays.toString(map.get(key)));
    }
    */
    int[] indexAtCereal = new int[numCereals];
    for (int i = 0; i < numCereals; i++) {
      indexAtCereal[i] = 0;
    }
    int[] cowState = new int[N + 1];
    for (int i = 1; i < N + 1; i++) {
      cowState[i] = 0;
    }
    
    HashSet<Integer> takenCereals = new HashSet<>();
    for (int i = 1; i < N + 1; i++) {
      if (!takenCereals.contains(map.get(i)[0])) {
          takenCereals.add(map.get(i)[0]);
          cowState[i] = 1;
          indexAtCereal[map.get(i)[1]] += 1;
      } else if (!takenCereals.contains(map.get(i)[1])) {
          takenCereals.add(map.get(i)[1]);
          cowState[i] = 2;
      }
    }
    int initialAmount = takenCereals.size();

    ArrayList<Integer> ans = new ArrayList<>();
    ans.add(initialAmount);
    //System.out.println(takenCereals);
    
    for (int i = 1; i < N; i++) {
      int cerealToChange = map.get(i)[0];
      indexAtCereal[cerealToChange] += 1;
      takenCereals.remove(cerealToChange);
      initialAmount -= 1;
      boolean shouldContinue = true;
      int current = cerealToChange;
      while (shouldContinue) {
          shouldContinue = false;
          /*
          if (indexAtCereal[current] >= array[current].size()) {
            initialAmount -= 1;
          }*/
          System.out.println(Arrays.toString(indexAtCereal) + " " + Arrays.toString(cowState));
          int count = 0;
          //indexAtCereal[current]
          for (int j = indexAtCereal[current]; j < array[current].size(); j++) {
              // The cow we are looking at can take its first choice cereal
              if (cowState[Math.abs((int)array[current].get(j))] == 0) {
                System.out.println("refill");
                  takenCereals.add(current);
                  initialAmount += 1;
                  if ((int)array[current].get(j) > 0) {
                      cowState[Math.abs((int)array[current].get(j))] = 1;
                  } else {
                      cowState[Math.abs((int)array[current].get(j))] = 2;
                  }
                  break;
              } else if (cowState[Math.abs((int)array[current].get(j))] == 1) {
                  //break;
                  //do nothing bc the cow already has its first choice
              } else if (cowState[Math.abs((int)array[current].get(j))] == 2) {
                  //cow has second choice but can take first choice
                  // second choice of cereal is map.get(j)[1]
                  takenCereals.add(current);
                  
                  current = map.get(j)[1];
                  indexAtCereal[current] += 1;
                  takenCereals.remove(current);
                  shouldContinue = true;
                  break;
              }
          }
      }
      System.out.println();
      ans.add(initialAmount);  
    }

    PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("cereal.out")));
    for (int i = 0; i < N; i++) {
      pw.println(ans.get(i));
    }
    pw.close();
  }
}